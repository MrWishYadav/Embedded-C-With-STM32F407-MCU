
KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d40  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08000ee8  08000ee8  00010ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f8c  08000f8c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000f8c  08000f8c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f8c  08000f8c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08000ff8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08000ff8  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001275  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000037a  00000000  00000000  00021309  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00021688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  000216f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000022f2  00000000  00000000  00021740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b9e  00000000  00000000  00023a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000832f  00000000  00000000  000245d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002c8ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000073c  00000000  00000000  0002c97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  0002d0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0002d154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ed0 	.word	0x08000ed0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08000ed0 	.word	0x08000ed0

080001e8 <delay>:

#include<stdint.h>
#include<stdio.h>

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i =0 ; i < 300000 ; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>

}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000493df 	.word	0x000493df

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	//peripheral register addresses
	uint32_t volatile *const pGPIODModeReg  =  (uint32_t*)(0x40020C00);
 800021a:	4b88      	ldr	r3, [pc, #544]	; (800043c <main+0x228>)
 800021c:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pInPutDataReg  =  (uint32_t*)(0x40020C00+0x10);
 800021e:	4b88      	ldr	r3, [pc, #544]	; (8000440 <main+0x22c>)
 8000220:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pOutPutDataReg =  (uint32_t*)(0x40020C00+0x14);
 8000222:	4b88      	ldr	r3, [pc, #544]	; (8000444 <main+0x230>)
 8000224:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pClockCtrlReg  =  (uint32_t*)(0x40023800+0x30);
 8000226:	4b88      	ldr	r3, [pc, #544]	; (8000448 <main+0x234>)
 8000228:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPullupDownReg =  (uint32_t*)(0x40020C00 + 0x0C);
 800022a:	4b88      	ldr	r3, [pc, #544]	; (800044c <main+0x238>)
 800022c:	607b      	str	r3, [r7, #4]

     //1.Enable the peripheral clock of GPIOD peripheral
	*pClockCtrlReg |= ( 1 << 3);
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	601a      	str	r2, [r3, #0]


    // 2.configure PD0,PD1,PD2,PD3 as output (rows)
	*pGPIODModeReg &= ~(0xFF); //clear
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	601a      	str	r2, [r3, #0]
	*pGPIODModeReg |= 0x55;   //set
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	601a      	str	r2, [r3, #0]


	// 3. configure PD8 , PD9, PD10, PD11 as input (columns)
    *pGPIODModeReg &= ~(0xFF << 16);
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	601a      	str	r2, [r3, #0]

	// 4.Enable internal pull-up resistors for PD8 PD9 PD10 PD11
    *pPullupDownReg &= ~(0xFF << 16);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
    *pPullupDownReg |=  (0x55 << 16);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]

while(1)
{
    //make all rows HIGH
    *pOutPutDataReg |= 0x0f;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 020f 	orr.w	r2, r3, #15
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]

    //make R1 LOW(PD0)
    *pOutPutDataReg &= ~( 1 << 0);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f023 0201 	bic.w	r2, r3, #1
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000296:	2b00      	cmp	r3, #0
 8000298:	d104      	bne.n	80002a4 <main+0x90>
    	//key is pressed
    	delay();
 800029a:	f7ff ffa5 	bl	80001e8 <delay>
    	printf("1\n");
 800029e:	486c      	ldr	r0, [pc, #432]	; (8000450 <main+0x23c>)
 80002a0:	f000 f9da 	bl	8000658 <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <main+0xa6>
    	//key is pressed
    	delay();
 80002b0:	f7ff ff9a 	bl	80001e8 <delay>
    	printf("2\n");
 80002b4:	4867      	ldr	r0, [pc, #412]	; (8000454 <main+0x240>)
 80002b6:	f000 f9cf 	bl	8000658 <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d104      	bne.n	80002d0 <main+0xbc>
    	//key is pressed
    	delay();
 80002c6:	f7ff ff8f 	bl	80001e8 <delay>
    	printf("3\n");
 80002ca:	4863      	ldr	r0, [pc, #396]	; (8000458 <main+0x244>)
 80002cc:	f000 f9c4 	bl	8000658 <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d104      	bne.n	80002e6 <main+0xd2>
    	//key is pressed
    	delay();
 80002dc:	f7ff ff84 	bl	80001e8 <delay>
    	printf("A\n");
 80002e0:	485e      	ldr	r0, [pc, #376]	; (800045c <main+0x248>)
 80002e2:	f000 f9b9 	bl	8000658 <puts>
    }


    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 020f 	orr.w	r2, r3, #15
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
    //make R2 LOW(PD1)
    *pOutPutDataReg &= ~( 1 << 1);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f023 0202 	bic.w	r2, r3, #2
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000306:	2b00      	cmp	r3, #0
 8000308:	d104      	bne.n	8000314 <main+0x100>
    	//key is pressed
    	delay();
 800030a:	f7ff ff6d 	bl	80001e8 <delay>
    	printf("4\n");
 800030e:	4854      	ldr	r0, [pc, #336]	; (8000460 <main+0x24c>)
 8000310:	f000 f9a2 	bl	8000658 <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800031c:	2b00      	cmp	r3, #0
 800031e:	d104      	bne.n	800032a <main+0x116>
    	//key is pressed
    	delay();
 8000320:	f7ff ff62 	bl	80001e8 <delay>
    	printf("5\n");
 8000324:	484f      	ldr	r0, [pc, #316]	; (8000464 <main+0x250>)
 8000326:	f000 f997 	bl	8000658 <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000332:	2b00      	cmp	r3, #0
 8000334:	d104      	bne.n	8000340 <main+0x12c>
    	//key is pressed
    	delay();
 8000336:	f7ff ff57 	bl	80001e8 <delay>
    	printf("6\n");
 800033a:	484b      	ldr	r0, [pc, #300]	; (8000468 <main+0x254>)
 800033c:	f000 f98c 	bl	8000658 <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000348:	2b00      	cmp	r3, #0
 800034a:	d104      	bne.n	8000356 <main+0x142>
    	//key is pressed
    	delay();
 800034c:	f7ff ff4c 	bl	80001e8 <delay>
    	printf("B\n");
 8000350:	4846      	ldr	r0, [pc, #280]	; (800046c <main+0x258>)
 8000352:	f000 f981 	bl	8000658 <puts>
    }

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f043 020f 	orr.w	r2, r3, #15
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
    //make R3 LOW(PD2)
    *pOutPutDataReg &= ~( 1 << 2);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f023 0204 	bic.w	r2, r3, #4
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000376:	2b00      	cmp	r3, #0
 8000378:	d104      	bne.n	8000384 <main+0x170>
    	//key is pressed
    	delay();
 800037a:	f7ff ff35 	bl	80001e8 <delay>
    	printf("7\n");
 800037e:	483c      	ldr	r0, [pc, #240]	; (8000470 <main+0x25c>)
 8000380:	f000 f96a 	bl	8000658 <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d104      	bne.n	800039a <main+0x186>
    	//key is pressed
    	delay();
 8000390:	f7ff ff2a 	bl	80001e8 <delay>
    	printf("8\n");
 8000394:	4837      	ldr	r0, [pc, #220]	; (8000474 <main+0x260>)
 8000396:	f000 f95f 	bl	8000658 <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d104      	bne.n	80003b0 <main+0x19c>
    	//key is pressed
    	delay();
 80003a6:	f7ff ff1f 	bl	80001e8 <delay>
    	printf("9\n");
 80003aa:	4833      	ldr	r0, [pc, #204]	; (8000478 <main+0x264>)
 80003ac:	f000 f954 	bl	8000658 <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d104      	bne.n	80003c6 <main+0x1b2>
    	//key is pressed
    	delay();
 80003bc:	f7ff ff14 	bl	80001e8 <delay>
    	printf("C\n");
 80003c0:	482e      	ldr	r0, [pc, #184]	; (800047c <main+0x268>)
 80003c2:	f000 f949 	bl	8000658 <puts>
    }

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f043 020f 	orr.w	r2, r3, #15
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
    //make R4 LOW(PD2)
    *pOutPutDataReg &= ~( 1 << 3);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f023 0208 	bic.w	r2, r3, #8
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d104      	bne.n	80003f4 <main+0x1e0>
    	//key is pressed
    	delay();
 80003ea:	f7ff fefd 	bl	80001e8 <delay>
    	printf("*\n");
 80003ee:	4824      	ldr	r0, [pc, #144]	; (8000480 <main+0x26c>)
 80003f0:	f000 f932 	bl	8000658 <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d104      	bne.n	800040a <main+0x1f6>
    	//key is pressed
    	delay();
 8000400:	f7ff fef2 	bl	80001e8 <delay>
    	printf("0\n");
 8000404:	481f      	ldr	r0, [pc, #124]	; (8000484 <main+0x270>)
 8000406:	f000 f927 	bl	8000658 <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <main+0x20c>
    	//key is pressed
    	delay();
 8000416:	f7ff fee7 	bl	80001e8 <delay>
    	printf("#\n");
 800041a:	481b      	ldr	r0, [pc, #108]	; (8000488 <main+0x274>)
 800041c:	f000 f91c 	bl	8000658 <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000428:	2b00      	cmp	r3, #0
 800042a:	f47f af24 	bne.w	8000276 <main+0x62>
    	//key is pressed
    	delay();
 800042e:	f7ff fedb 	bl	80001e8 <delay>
    	printf("D\n");
 8000432:	4816      	ldr	r0, [pc, #88]	; (800048c <main+0x278>)
 8000434:	f000 f910 	bl	8000658 <puts>
    *pOutPutDataReg |= 0x0f;
 8000438:	e71d      	b.n	8000276 <main+0x62>
 800043a:	bf00      	nop
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40020c10 	.word	0x40020c10
 8000444:	40020c14 	.word	0x40020c14
 8000448:	40023830 	.word	0x40023830
 800044c:	40020c0c 	.word	0x40020c0c
 8000450:	08000ee8 	.word	0x08000ee8
 8000454:	08000eec 	.word	0x08000eec
 8000458:	08000ef0 	.word	0x08000ef0
 800045c:	08000ef4 	.word	0x08000ef4
 8000460:	08000ef8 	.word	0x08000ef8
 8000464:	08000efc 	.word	0x08000efc
 8000468:	08000f00 	.word	0x08000f00
 800046c:	08000f04 	.word	0x08000f04
 8000470:	08000f08 	.word	0x08000f08
 8000474:	08000f0c 	.word	0x08000f0c
 8000478:	08000f10 	.word	0x08000f10
 800047c:	08000f14 	.word	0x08000f14
 8000480:	08000f18 	.word	0x08000f18
 8000484:	08000f1c 	.word	0x08000f1c
 8000488:	08000f20 	.word	0x08000f20
 800048c:	08000f24 	.word	0x08000f24

08000490 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <_sbrk+0x50>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d102      	bne.n	80004a6 <_sbrk+0x16>
		heap_end = &end;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <_sbrk+0x50>)
 80004a2:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <_sbrk+0x54>)
 80004a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <_sbrk+0x50>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <_sbrk+0x50>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	466a      	mov	r2, sp
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d907      	bls.n	80004ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004ba:	f000 f83f 	bl	800053c <__errno>
 80004be:	4602      	mov	r2, r0
 80004c0:	230c      	movs	r3, #12
 80004c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004c4:	f04f 33ff 	mov.w	r3, #4294967295
 80004c8:	e006      	b.n	80004d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <_sbrk+0x50>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	4a03      	ldr	r2, [pc, #12]	; (80004e0 <_sbrk+0x50>)
 80004d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000080 	.word	0x20000080
 80004e4:	20000090 	.word	0x20000090

080004e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ee:	490e      	ldr	r1, [pc, #56]	; (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000504:	4c0b      	ldr	r4, [pc, #44]	; (8000534 <LoopForever+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000512:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000516:	f000 f817 	bl	8000548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051a:	f7ff fe7b 	bl	8000214 <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800052c:	08000f94 	.word	0x08000f94
  ldr r2, =_sbss
 8000530:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000534:	20000090 	.word	0x20000090

08000538 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC_IRQHandler>
	...

0800053c <__errno>:
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <__errno+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000

08000548 <__libc_init_array>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	4e0d      	ldr	r6, [pc, #52]	; (8000580 <__libc_init_array+0x38>)
 800054c:	4c0d      	ldr	r4, [pc, #52]	; (8000584 <__libc_init_array+0x3c>)
 800054e:	1ba4      	subs	r4, r4, r6
 8000550:	10a4      	asrs	r4, r4, #2
 8000552:	2500      	movs	r5, #0
 8000554:	42a5      	cmp	r5, r4
 8000556:	d109      	bne.n	800056c <__libc_init_array+0x24>
 8000558:	4e0b      	ldr	r6, [pc, #44]	; (8000588 <__libc_init_array+0x40>)
 800055a:	4c0c      	ldr	r4, [pc, #48]	; (800058c <__libc_init_array+0x44>)
 800055c:	f000 fcb8 	bl	8000ed0 <_init>
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	10a4      	asrs	r4, r4, #2
 8000564:	2500      	movs	r5, #0
 8000566:	42a5      	cmp	r5, r4
 8000568:	d105      	bne.n	8000576 <__libc_init_array+0x2e>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000570:	4798      	blx	r3
 8000572:	3501      	adds	r5, #1
 8000574:	e7ee      	b.n	8000554 <__libc_init_array+0xc>
 8000576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800057a:	4798      	blx	r3
 800057c:	3501      	adds	r5, #1
 800057e:	e7f2      	b.n	8000566 <__libc_init_array+0x1e>
 8000580:	08000f8c 	.word	0x08000f8c
 8000584:	08000f8c 	.word	0x08000f8c
 8000588:	08000f8c 	.word	0x08000f8c
 800058c:	08000f90 	.word	0x08000f90

08000590 <memset>:
 8000590:	4402      	add	r2, r0
 8000592:	4603      	mov	r3, r0
 8000594:	4293      	cmp	r3, r2
 8000596:	d100      	bne.n	800059a <memset+0xa>
 8000598:	4770      	bx	lr
 800059a:	f803 1b01 	strb.w	r1, [r3], #1
 800059e:	e7f9      	b.n	8000594 <memset+0x4>

080005a0 <_puts_r>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	460e      	mov	r6, r1
 80005a4:	4605      	mov	r5, r0
 80005a6:	b118      	cbz	r0, 80005b0 <_puts_r+0x10>
 80005a8:	6983      	ldr	r3, [r0, #24]
 80005aa:	b90b      	cbnz	r3, 80005b0 <_puts_r+0x10>
 80005ac:	f000 fa0c 	bl	80009c8 <__sinit>
 80005b0:	69ab      	ldr	r3, [r5, #24]
 80005b2:	68ac      	ldr	r4, [r5, #8]
 80005b4:	b913      	cbnz	r3, 80005bc <_puts_r+0x1c>
 80005b6:	4628      	mov	r0, r5
 80005b8:	f000 fa06 	bl	80009c8 <__sinit>
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <_puts_r+0xac>)
 80005be:	429c      	cmp	r4, r3
 80005c0:	d117      	bne.n	80005f2 <_puts_r+0x52>
 80005c2:	686c      	ldr	r4, [r5, #4]
 80005c4:	89a3      	ldrh	r3, [r4, #12]
 80005c6:	071b      	lsls	r3, r3, #28
 80005c8:	d51d      	bpl.n	8000606 <_puts_r+0x66>
 80005ca:	6923      	ldr	r3, [r4, #16]
 80005cc:	b1db      	cbz	r3, 8000606 <_puts_r+0x66>
 80005ce:	3e01      	subs	r6, #1
 80005d0:	68a3      	ldr	r3, [r4, #8]
 80005d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005d6:	3b01      	subs	r3, #1
 80005d8:	60a3      	str	r3, [r4, #8]
 80005da:	b9e9      	cbnz	r1, 8000618 <_puts_r+0x78>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	da2e      	bge.n	800063e <_puts_r+0x9e>
 80005e0:	4622      	mov	r2, r4
 80005e2:	210a      	movs	r1, #10
 80005e4:	4628      	mov	r0, r5
 80005e6:	f000 f83f 	bl	8000668 <__swbuf_r>
 80005ea:	3001      	adds	r0, #1
 80005ec:	d011      	beq.n	8000612 <_puts_r+0x72>
 80005ee:	200a      	movs	r0, #10
 80005f0:	e011      	b.n	8000616 <_puts_r+0x76>
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <_puts_r+0xb0>)
 80005f4:	429c      	cmp	r4, r3
 80005f6:	d101      	bne.n	80005fc <_puts_r+0x5c>
 80005f8:	68ac      	ldr	r4, [r5, #8]
 80005fa:	e7e3      	b.n	80005c4 <_puts_r+0x24>
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <_puts_r+0xb4>)
 80005fe:	429c      	cmp	r4, r3
 8000600:	bf08      	it	eq
 8000602:	68ec      	ldreq	r4, [r5, #12]
 8000604:	e7de      	b.n	80005c4 <_puts_r+0x24>
 8000606:	4621      	mov	r1, r4
 8000608:	4628      	mov	r0, r5
 800060a:	f000 f87f 	bl	800070c <__swsetup_r>
 800060e:	2800      	cmp	r0, #0
 8000610:	d0dd      	beq.n	80005ce <_puts_r+0x2e>
 8000612:	f04f 30ff 	mov.w	r0, #4294967295
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2b00      	cmp	r3, #0
 800061a:	da04      	bge.n	8000626 <_puts_r+0x86>
 800061c:	69a2      	ldr	r2, [r4, #24]
 800061e:	429a      	cmp	r2, r3
 8000620:	dc06      	bgt.n	8000630 <_puts_r+0x90>
 8000622:	290a      	cmp	r1, #10
 8000624:	d004      	beq.n	8000630 <_puts_r+0x90>
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	6022      	str	r2, [r4, #0]
 800062c:	7019      	strb	r1, [r3, #0]
 800062e:	e7cf      	b.n	80005d0 <_puts_r+0x30>
 8000630:	4622      	mov	r2, r4
 8000632:	4628      	mov	r0, r5
 8000634:	f000 f818 	bl	8000668 <__swbuf_r>
 8000638:	3001      	adds	r0, #1
 800063a:	d1c9      	bne.n	80005d0 <_puts_r+0x30>
 800063c:	e7e9      	b.n	8000612 <_puts_r+0x72>
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	200a      	movs	r0, #10
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	6022      	str	r2, [r4, #0]
 8000646:	7018      	strb	r0, [r3, #0]
 8000648:	e7e5      	b.n	8000616 <_puts_r+0x76>
 800064a:	bf00      	nop
 800064c:	08000f4c 	.word	0x08000f4c
 8000650:	08000f6c 	.word	0x08000f6c
 8000654:	08000f2c 	.word	0x08000f2c

08000658 <puts>:
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <puts+0xc>)
 800065a:	4601      	mov	r1, r0
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	f7ff bf9f 	b.w	80005a0 <_puts_r>
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <__swbuf_r>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	460e      	mov	r6, r1
 800066c:	4614      	mov	r4, r2
 800066e:	4605      	mov	r5, r0
 8000670:	b118      	cbz	r0, 800067a <__swbuf_r+0x12>
 8000672:	6983      	ldr	r3, [r0, #24]
 8000674:	b90b      	cbnz	r3, 800067a <__swbuf_r+0x12>
 8000676:	f000 f9a7 	bl	80009c8 <__sinit>
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <__swbuf_r+0x98>)
 800067c:	429c      	cmp	r4, r3
 800067e:	d12a      	bne.n	80006d6 <__swbuf_r+0x6e>
 8000680:	686c      	ldr	r4, [r5, #4]
 8000682:	69a3      	ldr	r3, [r4, #24]
 8000684:	60a3      	str	r3, [r4, #8]
 8000686:	89a3      	ldrh	r3, [r4, #12]
 8000688:	071a      	lsls	r2, r3, #28
 800068a:	d52e      	bpl.n	80006ea <__swbuf_r+0x82>
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	b363      	cbz	r3, 80006ea <__swbuf_r+0x82>
 8000690:	6923      	ldr	r3, [r4, #16]
 8000692:	6820      	ldr	r0, [r4, #0]
 8000694:	1ac0      	subs	r0, r0, r3
 8000696:	6963      	ldr	r3, [r4, #20]
 8000698:	b2f6      	uxtb	r6, r6
 800069a:	4283      	cmp	r3, r0
 800069c:	4637      	mov	r7, r6
 800069e:	dc04      	bgt.n	80006aa <__swbuf_r+0x42>
 80006a0:	4621      	mov	r1, r4
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 f926 	bl	80008f4 <_fflush_r>
 80006a8:	bb28      	cbnz	r0, 80006f6 <__swbuf_r+0x8e>
 80006aa:	68a3      	ldr	r3, [r4, #8]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	60a3      	str	r3, [r4, #8]
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	6022      	str	r2, [r4, #0]
 80006b6:	701e      	strb	r6, [r3, #0]
 80006b8:	6963      	ldr	r3, [r4, #20]
 80006ba:	3001      	adds	r0, #1
 80006bc:	4283      	cmp	r3, r0
 80006be:	d004      	beq.n	80006ca <__swbuf_r+0x62>
 80006c0:	89a3      	ldrh	r3, [r4, #12]
 80006c2:	07db      	lsls	r3, r3, #31
 80006c4:	d519      	bpl.n	80006fa <__swbuf_r+0x92>
 80006c6:	2e0a      	cmp	r6, #10
 80006c8:	d117      	bne.n	80006fa <__swbuf_r+0x92>
 80006ca:	4621      	mov	r1, r4
 80006cc:	4628      	mov	r0, r5
 80006ce:	f000 f911 	bl	80008f4 <_fflush_r>
 80006d2:	b190      	cbz	r0, 80006fa <__swbuf_r+0x92>
 80006d4:	e00f      	b.n	80006f6 <__swbuf_r+0x8e>
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <__swbuf_r+0x9c>)
 80006d8:	429c      	cmp	r4, r3
 80006da:	d101      	bne.n	80006e0 <__swbuf_r+0x78>
 80006dc:	68ac      	ldr	r4, [r5, #8]
 80006de:	e7d0      	b.n	8000682 <__swbuf_r+0x1a>
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <__swbuf_r+0xa0>)
 80006e2:	429c      	cmp	r4, r3
 80006e4:	bf08      	it	eq
 80006e6:	68ec      	ldreq	r4, [r5, #12]
 80006e8:	e7cb      	b.n	8000682 <__swbuf_r+0x1a>
 80006ea:	4621      	mov	r1, r4
 80006ec:	4628      	mov	r0, r5
 80006ee:	f000 f80d 	bl	800070c <__swsetup_r>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d0cc      	beq.n	8000690 <__swbuf_r+0x28>
 80006f6:	f04f 37ff 	mov.w	r7, #4294967295
 80006fa:	4638      	mov	r0, r7
 80006fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006fe:	bf00      	nop
 8000700:	08000f4c 	.word	0x08000f4c
 8000704:	08000f6c 	.word	0x08000f6c
 8000708:	08000f2c 	.word	0x08000f2c

0800070c <__swsetup_r>:
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <__swsetup_r+0xcc>)
 800070e:	b570      	push	{r4, r5, r6, lr}
 8000710:	681d      	ldr	r5, [r3, #0]
 8000712:	4606      	mov	r6, r0
 8000714:	460c      	mov	r4, r1
 8000716:	b125      	cbz	r5, 8000722 <__swsetup_r+0x16>
 8000718:	69ab      	ldr	r3, [r5, #24]
 800071a:	b913      	cbnz	r3, 8000722 <__swsetup_r+0x16>
 800071c:	4628      	mov	r0, r5
 800071e:	f000 f953 	bl	80009c8 <__sinit>
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <__swsetup_r+0xd0>)
 8000724:	429c      	cmp	r4, r3
 8000726:	d10f      	bne.n	8000748 <__swsetup_r+0x3c>
 8000728:	686c      	ldr	r4, [r5, #4]
 800072a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800072e:	b29a      	uxth	r2, r3
 8000730:	0715      	lsls	r5, r2, #28
 8000732:	d42c      	bmi.n	800078e <__swsetup_r+0x82>
 8000734:	06d0      	lsls	r0, r2, #27
 8000736:	d411      	bmi.n	800075c <__swsetup_r+0x50>
 8000738:	2209      	movs	r2, #9
 800073a:	6032      	str	r2, [r6, #0]
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	81a3      	strh	r3, [r4, #12]
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	e03e      	b.n	80007c6 <__swsetup_r+0xba>
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <__swsetup_r+0xd4>)
 800074a:	429c      	cmp	r4, r3
 800074c:	d101      	bne.n	8000752 <__swsetup_r+0x46>
 800074e:	68ac      	ldr	r4, [r5, #8]
 8000750:	e7eb      	b.n	800072a <__swsetup_r+0x1e>
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <__swsetup_r+0xd8>)
 8000754:	429c      	cmp	r4, r3
 8000756:	bf08      	it	eq
 8000758:	68ec      	ldreq	r4, [r5, #12]
 800075a:	e7e6      	b.n	800072a <__swsetup_r+0x1e>
 800075c:	0751      	lsls	r1, r2, #29
 800075e:	d512      	bpl.n	8000786 <__swsetup_r+0x7a>
 8000760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000762:	b141      	cbz	r1, 8000776 <__swsetup_r+0x6a>
 8000764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000768:	4299      	cmp	r1, r3
 800076a:	d002      	beq.n	8000772 <__swsetup_r+0x66>
 800076c:	4630      	mov	r0, r6
 800076e:	f000 fa19 	bl	8000ba4 <_free_r>
 8000772:	2300      	movs	r3, #0
 8000774:	6363      	str	r3, [r4, #52]	; 0x34
 8000776:	89a3      	ldrh	r3, [r4, #12]
 8000778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800077c:	81a3      	strh	r3, [r4, #12]
 800077e:	2300      	movs	r3, #0
 8000780:	6063      	str	r3, [r4, #4]
 8000782:	6923      	ldr	r3, [r4, #16]
 8000784:	6023      	str	r3, [r4, #0]
 8000786:	89a3      	ldrh	r3, [r4, #12]
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	81a3      	strh	r3, [r4, #12]
 800078e:	6923      	ldr	r3, [r4, #16]
 8000790:	b94b      	cbnz	r3, 80007a6 <__swsetup_r+0x9a>
 8000792:	89a3      	ldrh	r3, [r4, #12]
 8000794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800079c:	d003      	beq.n	80007a6 <__swsetup_r+0x9a>
 800079e:	4621      	mov	r1, r4
 80007a0:	4630      	mov	r0, r6
 80007a2:	f000 f9bf 	bl	8000b24 <__smakebuf_r>
 80007a6:	89a2      	ldrh	r2, [r4, #12]
 80007a8:	f012 0301 	ands.w	r3, r2, #1
 80007ac:	d00c      	beq.n	80007c8 <__swsetup_r+0xbc>
 80007ae:	2300      	movs	r3, #0
 80007b0:	60a3      	str	r3, [r4, #8]
 80007b2:	6963      	ldr	r3, [r4, #20]
 80007b4:	425b      	negs	r3, r3
 80007b6:	61a3      	str	r3, [r4, #24]
 80007b8:	6923      	ldr	r3, [r4, #16]
 80007ba:	b953      	cbnz	r3, 80007d2 <__swsetup_r+0xc6>
 80007bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80007c4:	d1ba      	bne.n	800073c <__swsetup_r+0x30>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	0792      	lsls	r2, r2, #30
 80007ca:	bf58      	it	pl
 80007cc:	6963      	ldrpl	r3, [r4, #20]
 80007ce:	60a3      	str	r3, [r4, #8]
 80007d0:	e7f2      	b.n	80007b8 <__swsetup_r+0xac>
 80007d2:	2000      	movs	r0, #0
 80007d4:	e7f7      	b.n	80007c6 <__swsetup_r+0xba>
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	08000f4c 	.word	0x08000f4c
 80007e0:	08000f6c 	.word	0x08000f6c
 80007e4:	08000f2c 	.word	0x08000f2c

080007e8 <__sflush_r>:
 80007e8:	898a      	ldrh	r2, [r1, #12]
 80007ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ee:	4605      	mov	r5, r0
 80007f0:	0710      	lsls	r0, r2, #28
 80007f2:	460c      	mov	r4, r1
 80007f4:	d458      	bmi.n	80008a8 <__sflush_r+0xc0>
 80007f6:	684b      	ldr	r3, [r1, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc05      	bgt.n	8000808 <__sflush_r+0x20>
 80007fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dc02      	bgt.n	8000808 <__sflush_r+0x20>
 8000802:	2000      	movs	r0, #0
 8000804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800080a:	2e00      	cmp	r6, #0
 800080c:	d0f9      	beq.n	8000802 <__sflush_r+0x1a>
 800080e:	2300      	movs	r3, #0
 8000810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000814:	682f      	ldr	r7, [r5, #0]
 8000816:	6a21      	ldr	r1, [r4, #32]
 8000818:	602b      	str	r3, [r5, #0]
 800081a:	d032      	beq.n	8000882 <__sflush_r+0x9a>
 800081c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800081e:	89a3      	ldrh	r3, [r4, #12]
 8000820:	075a      	lsls	r2, r3, #29
 8000822:	d505      	bpl.n	8000830 <__sflush_r+0x48>
 8000824:	6863      	ldr	r3, [r4, #4]
 8000826:	1ac0      	subs	r0, r0, r3
 8000828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800082a:	b10b      	cbz	r3, 8000830 <__sflush_r+0x48>
 800082c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800082e:	1ac0      	subs	r0, r0, r3
 8000830:	2300      	movs	r3, #0
 8000832:	4602      	mov	r2, r0
 8000834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000836:	6a21      	ldr	r1, [r4, #32]
 8000838:	4628      	mov	r0, r5
 800083a:	47b0      	blx	r6
 800083c:	1c43      	adds	r3, r0, #1
 800083e:	89a3      	ldrh	r3, [r4, #12]
 8000840:	d106      	bne.n	8000850 <__sflush_r+0x68>
 8000842:	6829      	ldr	r1, [r5, #0]
 8000844:	291d      	cmp	r1, #29
 8000846:	d848      	bhi.n	80008da <__sflush_r+0xf2>
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <__sflush_r+0x108>)
 800084a:	40ca      	lsrs	r2, r1
 800084c:	07d6      	lsls	r6, r2, #31
 800084e:	d544      	bpl.n	80008da <__sflush_r+0xf2>
 8000850:	2200      	movs	r2, #0
 8000852:	6062      	str	r2, [r4, #4]
 8000854:	04d9      	lsls	r1, r3, #19
 8000856:	6922      	ldr	r2, [r4, #16]
 8000858:	6022      	str	r2, [r4, #0]
 800085a:	d504      	bpl.n	8000866 <__sflush_r+0x7e>
 800085c:	1c42      	adds	r2, r0, #1
 800085e:	d101      	bne.n	8000864 <__sflush_r+0x7c>
 8000860:	682b      	ldr	r3, [r5, #0]
 8000862:	b903      	cbnz	r3, 8000866 <__sflush_r+0x7e>
 8000864:	6560      	str	r0, [r4, #84]	; 0x54
 8000866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000868:	602f      	str	r7, [r5, #0]
 800086a:	2900      	cmp	r1, #0
 800086c:	d0c9      	beq.n	8000802 <__sflush_r+0x1a>
 800086e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000872:	4299      	cmp	r1, r3
 8000874:	d002      	beq.n	800087c <__sflush_r+0x94>
 8000876:	4628      	mov	r0, r5
 8000878:	f000 f994 	bl	8000ba4 <_free_r>
 800087c:	2000      	movs	r0, #0
 800087e:	6360      	str	r0, [r4, #52]	; 0x34
 8000880:	e7c0      	b.n	8000804 <__sflush_r+0x1c>
 8000882:	2301      	movs	r3, #1
 8000884:	4628      	mov	r0, r5
 8000886:	47b0      	blx	r6
 8000888:	1c41      	adds	r1, r0, #1
 800088a:	d1c8      	bne.n	800081e <__sflush_r+0x36>
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0c5      	beq.n	800081e <__sflush_r+0x36>
 8000892:	2b1d      	cmp	r3, #29
 8000894:	d001      	beq.n	800089a <__sflush_r+0xb2>
 8000896:	2b16      	cmp	r3, #22
 8000898:	d101      	bne.n	800089e <__sflush_r+0xb6>
 800089a:	602f      	str	r7, [r5, #0]
 800089c:	e7b1      	b.n	8000802 <__sflush_r+0x1a>
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	81a3      	strh	r3, [r4, #12]
 80008a6:	e7ad      	b.n	8000804 <__sflush_r+0x1c>
 80008a8:	690f      	ldr	r7, [r1, #16]
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d0a9      	beq.n	8000802 <__sflush_r+0x1a>
 80008ae:	0793      	lsls	r3, r2, #30
 80008b0:	680e      	ldr	r6, [r1, #0]
 80008b2:	bf08      	it	eq
 80008b4:	694b      	ldreq	r3, [r1, #20]
 80008b6:	600f      	str	r7, [r1, #0]
 80008b8:	bf18      	it	ne
 80008ba:	2300      	movne	r3, #0
 80008bc:	eba6 0807 	sub.w	r8, r6, r7
 80008c0:	608b      	str	r3, [r1, #8]
 80008c2:	f1b8 0f00 	cmp.w	r8, #0
 80008c6:	dd9c      	ble.n	8000802 <__sflush_r+0x1a>
 80008c8:	4643      	mov	r3, r8
 80008ca:	463a      	mov	r2, r7
 80008cc:	6a21      	ldr	r1, [r4, #32]
 80008ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008d0:	4628      	mov	r0, r5
 80008d2:	47b0      	blx	r6
 80008d4:	2800      	cmp	r0, #0
 80008d6:	dc06      	bgt.n	80008e6 <__sflush_r+0xfe>
 80008d8:	89a3      	ldrh	r3, [r4, #12]
 80008da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008de:	81a3      	strh	r3, [r4, #12]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	e78e      	b.n	8000804 <__sflush_r+0x1c>
 80008e6:	4407      	add	r7, r0
 80008e8:	eba8 0800 	sub.w	r8, r8, r0
 80008ec:	e7e9      	b.n	80008c2 <__sflush_r+0xda>
 80008ee:	bf00      	nop
 80008f0:	20400001 	.word	0x20400001

080008f4 <_fflush_r>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	690b      	ldr	r3, [r1, #16]
 80008f8:	4605      	mov	r5, r0
 80008fa:	460c      	mov	r4, r1
 80008fc:	b1db      	cbz	r3, 8000936 <_fflush_r+0x42>
 80008fe:	b118      	cbz	r0, 8000908 <_fflush_r+0x14>
 8000900:	6983      	ldr	r3, [r0, #24]
 8000902:	b90b      	cbnz	r3, 8000908 <_fflush_r+0x14>
 8000904:	f000 f860 	bl	80009c8 <__sinit>
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <_fflush_r+0x48>)
 800090a:	429c      	cmp	r4, r3
 800090c:	d109      	bne.n	8000922 <_fflush_r+0x2e>
 800090e:	686c      	ldr	r4, [r5, #4]
 8000910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000914:	b17b      	cbz	r3, 8000936 <_fflush_r+0x42>
 8000916:	4621      	mov	r1, r4
 8000918:	4628      	mov	r0, r5
 800091a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800091e:	f7ff bf63 	b.w	80007e8 <__sflush_r>
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_fflush_r+0x4c>)
 8000924:	429c      	cmp	r4, r3
 8000926:	d101      	bne.n	800092c <_fflush_r+0x38>
 8000928:	68ac      	ldr	r4, [r5, #8]
 800092a:	e7f1      	b.n	8000910 <_fflush_r+0x1c>
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_fflush_r+0x50>)
 800092e:	429c      	cmp	r4, r3
 8000930:	bf08      	it	eq
 8000932:	68ec      	ldreq	r4, [r5, #12]
 8000934:	e7ec      	b.n	8000910 <_fflush_r+0x1c>
 8000936:	2000      	movs	r0, #0
 8000938:	bd38      	pop	{r3, r4, r5, pc}
 800093a:	bf00      	nop
 800093c:	08000f4c 	.word	0x08000f4c
 8000940:	08000f6c 	.word	0x08000f6c
 8000944:	08000f2c 	.word	0x08000f2c

08000948 <std>:
 8000948:	2300      	movs	r3, #0
 800094a:	b510      	push	{r4, lr}
 800094c:	4604      	mov	r4, r0
 800094e:	e9c0 3300 	strd	r3, r3, [r0]
 8000952:	6083      	str	r3, [r0, #8]
 8000954:	8181      	strh	r1, [r0, #12]
 8000956:	6643      	str	r3, [r0, #100]	; 0x64
 8000958:	81c2      	strh	r2, [r0, #14]
 800095a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800095e:	6183      	str	r3, [r0, #24]
 8000960:	4619      	mov	r1, r3
 8000962:	2208      	movs	r2, #8
 8000964:	305c      	adds	r0, #92	; 0x5c
 8000966:	f7ff fe13 	bl	8000590 <memset>
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <std+0x38>)
 800096c:	6263      	str	r3, [r4, #36]	; 0x24
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <std+0x3c>)
 8000970:	62a3      	str	r3, [r4, #40]	; 0x28
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <std+0x40>)
 8000974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <std+0x44>)
 8000978:	6224      	str	r4, [r4, #32]
 800097a:	6323      	str	r3, [r4, #48]	; 0x30
 800097c:	bd10      	pop	{r4, pc}
 800097e:	bf00      	nop
 8000980:	08000d15 	.word	0x08000d15
 8000984:	08000d37 	.word	0x08000d37
 8000988:	08000d6f 	.word	0x08000d6f
 800098c:	08000d93 	.word	0x08000d93

08000990 <_cleanup_r>:
 8000990:	4901      	ldr	r1, [pc, #4]	; (8000998 <_cleanup_r+0x8>)
 8000992:	f000 b885 	b.w	8000aa0 <_fwalk_reent>
 8000996:	bf00      	nop
 8000998:	080008f5 	.word	0x080008f5

0800099c <__sfmoreglue>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	1e4a      	subs	r2, r1, #1
 80009a0:	2568      	movs	r5, #104	; 0x68
 80009a2:	4355      	muls	r5, r2
 80009a4:	460e      	mov	r6, r1
 80009a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009aa:	f000 f949 	bl	8000c40 <_malloc_r>
 80009ae:	4604      	mov	r4, r0
 80009b0:	b140      	cbz	r0, 80009c4 <__sfmoreglue+0x28>
 80009b2:	2100      	movs	r1, #0
 80009b4:	e9c0 1600 	strd	r1, r6, [r0]
 80009b8:	300c      	adds	r0, #12
 80009ba:	60a0      	str	r0, [r4, #8]
 80009bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009c0:	f7ff fde6 	bl	8000590 <memset>
 80009c4:	4620      	mov	r0, r4
 80009c6:	bd70      	pop	{r4, r5, r6, pc}

080009c8 <__sinit>:
 80009c8:	6983      	ldr	r3, [r0, #24]
 80009ca:	b510      	push	{r4, lr}
 80009cc:	4604      	mov	r4, r0
 80009ce:	bb33      	cbnz	r3, 8000a1e <__sinit+0x56>
 80009d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80009d4:	6503      	str	r3, [r0, #80]	; 0x50
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <__sinit+0x58>)
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <__sinit+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6282      	str	r2, [r0, #40]	; 0x28
 80009de:	4298      	cmp	r0, r3
 80009e0:	bf04      	itt	eq
 80009e2:	2301      	moveq	r3, #1
 80009e4:	6183      	streq	r3, [r0, #24]
 80009e6:	f000 f81f 	bl	8000a28 <__sfp>
 80009ea:	6060      	str	r0, [r4, #4]
 80009ec:	4620      	mov	r0, r4
 80009ee:	f000 f81b 	bl	8000a28 <__sfp>
 80009f2:	60a0      	str	r0, [r4, #8]
 80009f4:	4620      	mov	r0, r4
 80009f6:	f000 f817 	bl	8000a28 <__sfp>
 80009fa:	2200      	movs	r2, #0
 80009fc:	60e0      	str	r0, [r4, #12]
 80009fe:	2104      	movs	r1, #4
 8000a00:	6860      	ldr	r0, [r4, #4]
 8000a02:	f7ff ffa1 	bl	8000948 <std>
 8000a06:	2201      	movs	r2, #1
 8000a08:	2109      	movs	r1, #9
 8000a0a:	68a0      	ldr	r0, [r4, #8]
 8000a0c:	f7ff ff9c 	bl	8000948 <std>
 8000a10:	2202      	movs	r2, #2
 8000a12:	2112      	movs	r1, #18
 8000a14:	68e0      	ldr	r0, [r4, #12]
 8000a16:	f7ff ff97 	bl	8000948 <std>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61a3      	str	r3, [r4, #24]
 8000a1e:	bd10      	pop	{r4, pc}
 8000a20:	08000f28 	.word	0x08000f28
 8000a24:	08000991 	.word	0x08000991

08000a28 <__sfp>:
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <__sfp+0x70>)
 8000a2c:	681e      	ldr	r6, [r3, #0]
 8000a2e:	69b3      	ldr	r3, [r6, #24]
 8000a30:	4607      	mov	r7, r0
 8000a32:	b913      	cbnz	r3, 8000a3a <__sfp+0x12>
 8000a34:	4630      	mov	r0, r6
 8000a36:	f7ff ffc7 	bl	80009c8 <__sinit>
 8000a3a:	3648      	adds	r6, #72	; 0x48
 8000a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	d503      	bpl.n	8000a4c <__sfp+0x24>
 8000a44:	6833      	ldr	r3, [r6, #0]
 8000a46:	b133      	cbz	r3, 8000a56 <__sfp+0x2e>
 8000a48:	6836      	ldr	r6, [r6, #0]
 8000a4a:	e7f7      	b.n	8000a3c <__sfp+0x14>
 8000a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a50:	b16d      	cbz	r5, 8000a6e <__sfp+0x46>
 8000a52:	3468      	adds	r4, #104	; 0x68
 8000a54:	e7f4      	b.n	8000a40 <__sfp+0x18>
 8000a56:	2104      	movs	r1, #4
 8000a58:	4638      	mov	r0, r7
 8000a5a:	f7ff ff9f 	bl	800099c <__sfmoreglue>
 8000a5e:	6030      	str	r0, [r6, #0]
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d1f1      	bne.n	8000a48 <__sfp+0x20>
 8000a64:	230c      	movs	r3, #12
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4604      	mov	r4, r0
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <__sfp+0x74>)
 8000a70:	6665      	str	r5, [r4, #100]	; 0x64
 8000a72:	e9c4 5500 	strd	r5, r5, [r4]
 8000a76:	60a5      	str	r5, [r4, #8]
 8000a78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000a7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000a80:	2208      	movs	r2, #8
 8000a82:	4629      	mov	r1, r5
 8000a84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a88:	f7ff fd82 	bl	8000590 <memset>
 8000a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a94:	e7e9      	b.n	8000a6a <__sfp+0x42>
 8000a96:	bf00      	nop
 8000a98:	08000f28 	.word	0x08000f28
 8000a9c:	ffff0001 	.word	0xffff0001

08000aa0 <_fwalk_reent>:
 8000aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa4:	4680      	mov	r8, r0
 8000aa6:	4689      	mov	r9, r1
 8000aa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000aac:	2600      	movs	r6, #0
 8000aae:	b914      	cbnz	r4, 8000ab6 <_fwalk_reent+0x16>
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ab6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000aba:	3f01      	subs	r7, #1
 8000abc:	d501      	bpl.n	8000ac2 <_fwalk_reent+0x22>
 8000abe:	6824      	ldr	r4, [r4, #0]
 8000ac0:	e7f5      	b.n	8000aae <_fwalk_reent+0xe>
 8000ac2:	89ab      	ldrh	r3, [r5, #12]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d907      	bls.n	8000ad8 <_fwalk_reent+0x38>
 8000ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000acc:	3301      	adds	r3, #1
 8000ace:	d003      	beq.n	8000ad8 <_fwalk_reent+0x38>
 8000ad0:	4629      	mov	r1, r5
 8000ad2:	4640      	mov	r0, r8
 8000ad4:	47c8      	blx	r9
 8000ad6:	4306      	orrs	r6, r0
 8000ad8:	3568      	adds	r5, #104	; 0x68
 8000ada:	e7ee      	b.n	8000aba <_fwalk_reent+0x1a>

08000adc <__swhatbuf_r>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	460e      	mov	r6, r1
 8000ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	b096      	sub	sp, #88	; 0x58
 8000ae8:	4614      	mov	r4, r2
 8000aea:	461d      	mov	r5, r3
 8000aec:	da07      	bge.n	8000afe <__swhatbuf_r+0x22>
 8000aee:	2300      	movs	r3, #0
 8000af0:	602b      	str	r3, [r5, #0]
 8000af2:	89b3      	ldrh	r3, [r6, #12]
 8000af4:	061a      	lsls	r2, r3, #24
 8000af6:	d410      	bmi.n	8000b1a <__swhatbuf_r+0x3e>
 8000af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afc:	e00e      	b.n	8000b1c <__swhatbuf_r+0x40>
 8000afe:	466a      	mov	r2, sp
 8000b00:	f000 f96e 	bl	8000de0 <_fstat_r>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	dbf2      	blt.n	8000aee <__swhatbuf_r+0x12>
 8000b08:	9a01      	ldr	r2, [sp, #4]
 8000b0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b12:	425a      	negs	r2, r3
 8000b14:	415a      	adcs	r2, r3
 8000b16:	602a      	str	r2, [r5, #0]
 8000b18:	e7ee      	b.n	8000af8 <__swhatbuf_r+0x1c>
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	6023      	str	r3, [r4, #0]
 8000b20:	b016      	add	sp, #88	; 0x58
 8000b22:	bd70      	pop	{r4, r5, r6, pc}

08000b24 <__smakebuf_r>:
 8000b24:	898b      	ldrh	r3, [r1, #12]
 8000b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b28:	079d      	lsls	r5, r3, #30
 8000b2a:	4606      	mov	r6, r0
 8000b2c:	460c      	mov	r4, r1
 8000b2e:	d507      	bpl.n	8000b40 <__smakebuf_r+0x1c>
 8000b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b34:	6023      	str	r3, [r4, #0]
 8000b36:	6123      	str	r3, [r4, #16]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	6163      	str	r3, [r4, #20]
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	ab01      	add	r3, sp, #4
 8000b42:	466a      	mov	r2, sp
 8000b44:	f7ff ffca 	bl	8000adc <__swhatbuf_r>
 8000b48:	9900      	ldr	r1, [sp, #0]
 8000b4a:	4605      	mov	r5, r0
 8000b4c:	4630      	mov	r0, r6
 8000b4e:	f000 f877 	bl	8000c40 <_malloc_r>
 8000b52:	b948      	cbnz	r0, 8000b68 <__smakebuf_r+0x44>
 8000b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b58:	059a      	lsls	r2, r3, #22
 8000b5a:	d4ef      	bmi.n	8000b3c <__smakebuf_r+0x18>
 8000b5c:	f023 0303 	bic.w	r3, r3, #3
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	81a3      	strh	r3, [r4, #12]
 8000b66:	e7e3      	b.n	8000b30 <__smakebuf_r+0xc>
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <__smakebuf_r+0x7c>)
 8000b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b6c:	89a3      	ldrh	r3, [r4, #12]
 8000b6e:	6020      	str	r0, [r4, #0]
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	81a3      	strh	r3, [r4, #12]
 8000b76:	9b00      	ldr	r3, [sp, #0]
 8000b78:	6163      	str	r3, [r4, #20]
 8000b7a:	9b01      	ldr	r3, [sp, #4]
 8000b7c:	6120      	str	r0, [r4, #16]
 8000b7e:	b15b      	cbz	r3, 8000b98 <__smakebuf_r+0x74>
 8000b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b84:	4630      	mov	r0, r6
 8000b86:	f000 f93d 	bl	8000e04 <_isatty_r>
 8000b8a:	b128      	cbz	r0, 8000b98 <__smakebuf_r+0x74>
 8000b8c:	89a3      	ldrh	r3, [r4, #12]
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	81a3      	strh	r3, [r4, #12]
 8000b98:	89a3      	ldrh	r3, [r4, #12]
 8000b9a:	431d      	orrs	r5, r3
 8000b9c:	81a5      	strh	r5, [r4, #12]
 8000b9e:	e7cd      	b.n	8000b3c <__smakebuf_r+0x18>
 8000ba0:	08000991 	.word	0x08000991

08000ba4 <_free_r>:
 8000ba4:	b538      	push	{r3, r4, r5, lr}
 8000ba6:	4605      	mov	r5, r0
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d045      	beq.n	8000c38 <_free_r+0x94>
 8000bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bb0:	1f0c      	subs	r4, r1, #4
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bfb8      	it	lt
 8000bb6:	18e4      	addlt	r4, r4, r3
 8000bb8:	f000 f946 	bl	8000e48 <__malloc_lock>
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <_free_r+0x98>)
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	b933      	cbnz	r3, 8000bd2 <_free_r+0x2e>
 8000bc4:	6063      	str	r3, [r4, #4]
 8000bc6:	6014      	str	r4, [r2, #0]
 8000bc8:	4628      	mov	r0, r5
 8000bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bce:	f000 b93c 	b.w	8000e4a <__malloc_unlock>
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d90c      	bls.n	8000bf0 <_free_r+0x4c>
 8000bd6:	6821      	ldr	r1, [r4, #0]
 8000bd8:	1862      	adds	r2, r4, r1
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	bf04      	itt	eq
 8000bde:	681a      	ldreq	r2, [r3, #0]
 8000be0:	685b      	ldreq	r3, [r3, #4]
 8000be2:	6063      	str	r3, [r4, #4]
 8000be4:	bf04      	itt	eq
 8000be6:	1852      	addeq	r2, r2, r1
 8000be8:	6022      	streq	r2, [r4, #0]
 8000bea:	6004      	str	r4, [r0, #0]
 8000bec:	e7ec      	b.n	8000bc8 <_free_r+0x24>
 8000bee:	4613      	mov	r3, r2
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	b10a      	cbz	r2, 8000bf8 <_free_r+0x54>
 8000bf4:	42a2      	cmp	r2, r4
 8000bf6:	d9fa      	bls.n	8000bee <_free_r+0x4a>
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	1858      	adds	r0, r3, r1
 8000bfc:	42a0      	cmp	r0, r4
 8000bfe:	d10b      	bne.n	8000c18 <_free_r+0x74>
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	4401      	add	r1, r0
 8000c04:	1858      	adds	r0, r3, r1
 8000c06:	4282      	cmp	r2, r0
 8000c08:	6019      	str	r1, [r3, #0]
 8000c0a:	d1dd      	bne.n	8000bc8 <_free_r+0x24>
 8000c0c:	6810      	ldr	r0, [r2, #0]
 8000c0e:	6852      	ldr	r2, [r2, #4]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	4401      	add	r1, r0
 8000c14:	6019      	str	r1, [r3, #0]
 8000c16:	e7d7      	b.n	8000bc8 <_free_r+0x24>
 8000c18:	d902      	bls.n	8000c20 <_free_r+0x7c>
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	602b      	str	r3, [r5, #0]
 8000c1e:	e7d3      	b.n	8000bc8 <_free_r+0x24>
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	1821      	adds	r1, r4, r0
 8000c24:	428a      	cmp	r2, r1
 8000c26:	bf04      	itt	eq
 8000c28:	6811      	ldreq	r1, [r2, #0]
 8000c2a:	6852      	ldreq	r2, [r2, #4]
 8000c2c:	6062      	str	r2, [r4, #4]
 8000c2e:	bf04      	itt	eq
 8000c30:	1809      	addeq	r1, r1, r0
 8000c32:	6021      	streq	r1, [r4, #0]
 8000c34:	605c      	str	r4, [r3, #4]
 8000c36:	e7c7      	b.n	8000bc8 <_free_r+0x24>
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000084 	.word	0x20000084

08000c40 <_malloc_r>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	1ccd      	adds	r5, r1, #3
 8000c44:	f025 0503 	bic.w	r5, r5, #3
 8000c48:	3508      	adds	r5, #8
 8000c4a:	2d0c      	cmp	r5, #12
 8000c4c:	bf38      	it	cc
 8000c4e:	250c      	movcc	r5, #12
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	db01      	blt.n	8000c5a <_malloc_r+0x1a>
 8000c56:	42a9      	cmp	r1, r5
 8000c58:	d903      	bls.n	8000c62 <_malloc_r+0x22>
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	6033      	str	r3, [r6, #0]
 8000c5e:	2000      	movs	r0, #0
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
 8000c62:	f000 f8f1 	bl	8000e48 <__malloc_lock>
 8000c66:	4a21      	ldr	r2, [pc, #132]	; (8000cec <_malloc_r+0xac>)
 8000c68:	6814      	ldr	r4, [r2, #0]
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	b991      	cbnz	r1, 8000c94 <_malloc_r+0x54>
 8000c6e:	4c20      	ldr	r4, [pc, #128]	; (8000cf0 <_malloc_r+0xb0>)
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	b91b      	cbnz	r3, 8000c7c <_malloc_r+0x3c>
 8000c74:	4630      	mov	r0, r6
 8000c76:	f000 f83d 	bl	8000cf4 <_sbrk_r>
 8000c7a:	6020      	str	r0, [r4, #0]
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	4630      	mov	r0, r6
 8000c80:	f000 f838 	bl	8000cf4 <_sbrk_r>
 8000c84:	1c43      	adds	r3, r0, #1
 8000c86:	d124      	bne.n	8000cd2 <_malloc_r+0x92>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	6033      	str	r3, [r6, #0]
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	f000 f8dc 	bl	8000e4a <__malloc_unlock>
 8000c92:	e7e4      	b.n	8000c5e <_malloc_r+0x1e>
 8000c94:	680b      	ldr	r3, [r1, #0]
 8000c96:	1b5b      	subs	r3, r3, r5
 8000c98:	d418      	bmi.n	8000ccc <_malloc_r+0x8c>
 8000c9a:	2b0b      	cmp	r3, #11
 8000c9c:	d90f      	bls.n	8000cbe <_malloc_r+0x7e>
 8000c9e:	600b      	str	r3, [r1, #0]
 8000ca0:	50cd      	str	r5, [r1, r3]
 8000ca2:	18cc      	adds	r4, r1, r3
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f000 f8d0 	bl	8000e4a <__malloc_unlock>
 8000caa:	f104 000b 	add.w	r0, r4, #11
 8000cae:	1d23      	adds	r3, r4, #4
 8000cb0:	f020 0007 	bic.w	r0, r0, #7
 8000cb4:	1ac3      	subs	r3, r0, r3
 8000cb6:	d0d3      	beq.n	8000c60 <_malloc_r+0x20>
 8000cb8:	425a      	negs	r2, r3
 8000cba:	50e2      	str	r2, [r4, r3]
 8000cbc:	e7d0      	b.n	8000c60 <_malloc_r+0x20>
 8000cbe:	428c      	cmp	r4, r1
 8000cc0:	684b      	ldr	r3, [r1, #4]
 8000cc2:	bf16      	itet	ne
 8000cc4:	6063      	strne	r3, [r4, #4]
 8000cc6:	6013      	streq	r3, [r2, #0]
 8000cc8:	460c      	movne	r4, r1
 8000cca:	e7eb      	b.n	8000ca4 <_malloc_r+0x64>
 8000ccc:	460c      	mov	r4, r1
 8000cce:	6849      	ldr	r1, [r1, #4]
 8000cd0:	e7cc      	b.n	8000c6c <_malloc_r+0x2c>
 8000cd2:	1cc4      	adds	r4, r0, #3
 8000cd4:	f024 0403 	bic.w	r4, r4, #3
 8000cd8:	42a0      	cmp	r0, r4
 8000cda:	d005      	beq.n	8000ce8 <_malloc_r+0xa8>
 8000cdc:	1a21      	subs	r1, r4, r0
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f000 f808 	bl	8000cf4 <_sbrk_r>
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	d0cf      	beq.n	8000c88 <_malloc_r+0x48>
 8000ce8:	6025      	str	r5, [r4, #0]
 8000cea:	e7db      	b.n	8000ca4 <_malloc_r+0x64>
 8000cec:	20000084 	.word	0x20000084
 8000cf0:	20000088 	.word	0x20000088

08000cf4 <_sbrk_r>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4c06      	ldr	r4, [pc, #24]	; (8000d10 <_sbrk_r+0x1c>)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	4605      	mov	r5, r0
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	6023      	str	r3, [r4, #0]
 8000d00:	f7ff fbc6 	bl	8000490 <_sbrk>
 8000d04:	1c43      	adds	r3, r0, #1
 8000d06:	d102      	bne.n	8000d0e <_sbrk_r+0x1a>
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	b103      	cbz	r3, 8000d0e <_sbrk_r+0x1a>
 8000d0c:	602b      	str	r3, [r5, #0]
 8000d0e:	bd38      	pop	{r3, r4, r5, pc}
 8000d10:	2000008c 	.word	0x2000008c

08000d14 <__sread>:
 8000d14:	b510      	push	{r4, lr}
 8000d16:	460c      	mov	r4, r1
 8000d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d1c:	f000 f896 	bl	8000e4c <_read_r>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	bfab      	itete	ge
 8000d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d26:	89a3      	ldrhlt	r3, [r4, #12]
 8000d28:	181b      	addge	r3, r3, r0
 8000d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d2e:	bfac      	ite	ge
 8000d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d32:	81a3      	strhlt	r3, [r4, #12]
 8000d34:	bd10      	pop	{r4, pc}

08000d36 <__swrite>:
 8000d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d3a:	461f      	mov	r7, r3
 8000d3c:	898b      	ldrh	r3, [r1, #12]
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	4605      	mov	r5, r0
 8000d42:	460c      	mov	r4, r1
 8000d44:	4616      	mov	r6, r2
 8000d46:	d505      	bpl.n	8000d54 <__swrite+0x1e>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d50:	f000 f868 	bl	8000e24 <_lseek_r>
 8000d54:	89a3      	ldrh	r3, [r4, #12]
 8000d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d5e:	81a3      	strh	r3, [r4, #12]
 8000d60:	4632      	mov	r2, r6
 8000d62:	463b      	mov	r3, r7
 8000d64:	4628      	mov	r0, r5
 8000d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d6a:	f000 b817 	b.w	8000d9c <_write_r>

08000d6e <__sseek>:
 8000d6e:	b510      	push	{r4, lr}
 8000d70:	460c      	mov	r4, r1
 8000d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d76:	f000 f855 	bl	8000e24 <_lseek_r>
 8000d7a:	1c43      	adds	r3, r0, #1
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	bf15      	itete	ne
 8000d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d8a:	81a3      	strheq	r3, [r4, #12]
 8000d8c:	bf18      	it	ne
 8000d8e:	81a3      	strhne	r3, [r4, #12]
 8000d90:	bd10      	pop	{r4, pc}

08000d92 <__sclose>:
 8000d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d96:	f000 b813 	b.w	8000dc0 <_close_r>
	...

08000d9c <_write_r>:
 8000d9c:	b538      	push	{r3, r4, r5, lr}
 8000d9e:	4c07      	ldr	r4, [pc, #28]	; (8000dbc <_write_r+0x20>)
 8000da0:	4605      	mov	r5, r0
 8000da2:	4608      	mov	r0, r1
 8000da4:	4611      	mov	r1, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	6022      	str	r2, [r4, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	f000 f888 	bl	8000ec0 <_write>
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	d102      	bne.n	8000dba <_write_r+0x1e>
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	b103      	cbz	r3, 8000dba <_write_r+0x1e>
 8000db8:	602b      	str	r3, [r5, #0]
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
 8000dbc:	2000008c 	.word	0x2000008c

08000dc0 <_close_r>:
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	4c06      	ldr	r4, [pc, #24]	; (8000ddc <_close_r+0x1c>)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4605      	mov	r5, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	6023      	str	r3, [r4, #0]
 8000dcc:	f000 f850 	bl	8000e70 <_close>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	d102      	bne.n	8000dda <_close_r+0x1a>
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	b103      	cbz	r3, 8000dda <_close_r+0x1a>
 8000dd8:	602b      	str	r3, [r5, #0]
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	2000008c 	.word	0x2000008c

08000de0 <_fstat_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4c07      	ldr	r4, [pc, #28]	; (8000e00 <_fstat_r+0x20>)
 8000de4:	2300      	movs	r3, #0
 8000de6:	4605      	mov	r5, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	6023      	str	r3, [r4, #0]
 8000dee:	f000 f847 	bl	8000e80 <_fstat>
 8000df2:	1c43      	adds	r3, r0, #1
 8000df4:	d102      	bne.n	8000dfc <_fstat_r+0x1c>
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	b103      	cbz	r3, 8000dfc <_fstat_r+0x1c>
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	bd38      	pop	{r3, r4, r5, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000008c 	.word	0x2000008c

08000e04 <_isatty_r>:
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	4c06      	ldr	r4, [pc, #24]	; (8000e20 <_isatty_r+0x1c>)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4605      	mov	r5, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	6023      	str	r3, [r4, #0]
 8000e10:	f000 f83e 	bl	8000e90 <_isatty>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	d102      	bne.n	8000e1e <_isatty_r+0x1a>
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	b103      	cbz	r3, 8000e1e <_isatty_r+0x1a>
 8000e1c:	602b      	str	r3, [r5, #0]
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	2000008c 	.word	0x2000008c

08000e24 <_lseek_r>:
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4c07      	ldr	r4, [pc, #28]	; (8000e44 <_lseek_r+0x20>)
 8000e28:	4605      	mov	r5, r0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	2200      	movs	r2, #0
 8000e30:	6022      	str	r2, [r4, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	f000 f834 	bl	8000ea0 <_lseek>
 8000e38:	1c43      	adds	r3, r0, #1
 8000e3a:	d102      	bne.n	8000e42 <_lseek_r+0x1e>
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	b103      	cbz	r3, 8000e42 <_lseek_r+0x1e>
 8000e40:	602b      	str	r3, [r5, #0]
 8000e42:	bd38      	pop	{r3, r4, r5, pc}
 8000e44:	2000008c 	.word	0x2000008c

08000e48 <__malloc_lock>:
 8000e48:	4770      	bx	lr

08000e4a <__malloc_unlock>:
 8000e4a:	4770      	bx	lr

08000e4c <_read_r>:
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	4c07      	ldr	r4, [pc, #28]	; (8000e6c <_read_r+0x20>)
 8000e50:	4605      	mov	r5, r0
 8000e52:	4608      	mov	r0, r1
 8000e54:	4611      	mov	r1, r2
 8000e56:	2200      	movs	r2, #0
 8000e58:	6022      	str	r2, [r4, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f000 f828 	bl	8000eb0 <_read>
 8000e60:	1c43      	adds	r3, r0, #1
 8000e62:	d102      	bne.n	8000e6a <_read_r+0x1e>
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	b103      	cbz	r3, 8000e6a <_read_r+0x1e>
 8000e68:	602b      	str	r3, [r5, #0]
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}
 8000e6c:	2000008c 	.word	0x2000008c

08000e70 <_close>:
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <_close+0xc>)
 8000e72:	2258      	movs	r2, #88	; 0x58
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7a:	4770      	bx	lr
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <_fstat>:
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <_fstat+0xc>)
 8000e82:	2258      	movs	r2, #88	; 0x58
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8a:	4770      	bx	lr
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <_isatty>:
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <_isatty+0xc>)
 8000e92:	2258      	movs	r2, #88	; 0x58
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	2000      	movs	r0, #0
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000008c 	.word	0x2000008c

08000ea0 <_lseek>:
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <_lseek+0xc>)
 8000ea2:	2258      	movs	r2, #88	; 0x58
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eaa:	4770      	bx	lr
 8000eac:	2000008c 	.word	0x2000008c

08000eb0 <_read>:
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <_read+0xc>)
 8000eb2:	2258      	movs	r2, #88	; 0x58
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eba:	4770      	bx	lr
 8000ebc:	2000008c 	.word	0x2000008c

08000ec0 <_write>:
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <_write+0xc>)
 8000ec2:	2258      	movs	r2, #88	; 0x58
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eca:	4770      	bx	lr
 8000ecc:	2000008c 	.word	0x2000008c

08000ed0 <_init>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr

08000edc <_fini>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	bf00      	nop
 8000ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ee2:	bc08      	pop	{r3}
 8000ee4:	469e      	mov	lr, r3
 8000ee6:	4770      	bx	lr
